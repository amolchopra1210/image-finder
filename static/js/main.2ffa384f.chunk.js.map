{"version":3,"sources":["components/navbar/Navbar.js","components/image-results/ImageResults.js","components/search/Search.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","AppBar_default","title","ImageResults","state","open","currentImg","handleOpen","img","_this","setState","handleClose","imageListContent","_this2","this","images","props","GridList","cols","map","tags","key","id","subtitle","user","actionIcon","IconButton_default","onClick","largeImageURL","zoom_in_default","color","src","alt","actions","FlatButton_default","label","primary","Dialog_default","modal","onRequestClose","style","width","Component","Search","searchText","amount","apiURL","apiKey","process","onTextChange","e","val","target","value","Object","defineProperty","name","axios","get","concat","then","res","data","hits","catch","err","console","log","onAmountChange","index","placeholderText","textAlign","Fragment","TextField_default","onChange","floatingLabelText","fullWidth","SelectField_default","MenuItem_default","primaryText","length","image_results_ImageResults","App","MuiThemeProvider_default","navbar_Navbar","search_Search","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2ffa384f.chunk.js","sourcesContent":["import React from 'react'\r\nimport AppBar from 'material-ui/AppBar';\r\nconst Navbar =  () => <AppBar title = \"Image Finder\"/>\r\n\r\nexport default Navbar;","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport {GridList, GridTile} from 'material-ui/GridList';\r\nimport IconButton from 'material-ui/IconButton';\r\nimport ZoomIn from 'material-ui/svg-icons/action/zoom-in';\r\nimport Dialog from 'material-ui/Dialog';\r\nimport FlatButton from 'material-ui/FlatButton';\r\n\r\nclass ImageResults extends Component {\r\n\r\n    state = {\r\n        open: false,\r\n        currentImg: ''\r\n    }\r\n\r\n    handleOpen = img => {\r\n        this.setState({\r\n            open: true,\r\n            currentImg: img\r\n        })\r\n    }\r\n\r\n    \r\n    handleClose = () => {\r\n        this.setState({\r\n            open: false,\r\n        })\r\n    } \r\n  render() {\r\n      let imageListContent;\r\n      const { images } = this.props;\r\n      \r\n      if(images) {\r\n        imageListContent = (\r\n            <GridList cols = {3}>\r\n                {images.map(img => (\r\n                    <GridTile title = {img.tags} key = {img.id} \r\n                    subtitle = {<span>by <strong>{img.user}</strong></span>}\r\n                    actionIcon = {\r\n                        <IconButton onClick = {() => this.handleOpen(img.largeImageURL)}>\r\n                            <ZoomIn color = \"white\"/>\r\n                        </IconButton>\r\n                    }\r\n                    >\r\n                        <img src = {img.largeImageURL} alt = \"\"/>\r\n                    </GridTile>\r\n                ))}\r\n            </GridList>\r\n        )\r\n      }else {\r\n        imageListContent = null;\r\n      }\r\n\r\n      const actions = [\r\n          <FlatButton label = \"close\" primary = {true} onClick = {this.handleClose}/>\r\n      ]\r\n\r\n    return (\r\n      <div>\r\n        {imageListContent}\r\n        <Dialog actions = {actions} modal = {false} open = {this.state.open} onRequestClose = {this.handleClose}>\r\n            <img src = {this.state.currentImg} alt = \"\" style = {{width: \"100%\"}}/>\r\n        </Dialog>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nImageResults.propTypes = {\r\n    images: PropTypes.array.isRequired\r\n}\r\n\r\nexport default ImageResults;\r\n","import React, { Component } from 'react'\r\nimport TextField from 'material-ui/TextField';\r\nimport SelectField from 'material-ui/SelectField';\r\nimport MenuItem from 'material-ui/MenuItem';\r\nimport axios from 'axios';\r\nimport ImageResults from '../image-results/ImageResults';\r\n\r\nclass Search extends Component {\r\n    state = {\r\n        searchText: '',\r\n        amount: 15,\r\n        apiURL: 'https://pixabay.com/api',\r\n        apiKey: process.env.REACT_APP_IMAGE_API,\r\n        images: [],\r\n    }\r\n    onTextChange = (e) => {\r\n        const val = e.target.value;\r\n        this.setState({\r\n            [e.target.name]:val\r\n        },()=>{\r\n            if(val === ''){\r\n                this.setState({images: []})\r\n            }\r\n            else{\r\n                axios.get(`${this.state.apiURL}/?key=${this.state.apiKey}&q=${this.state.searchText}&image_type=photo&per_page=${this.state.amount}&safesearch=true`).then(res => this.setState({images: res.data.hits})).catch(err => console.log(err))      \r\n            }\r\n        })\r\n    }\r\n\r\n    onAmountChange = (e,index,value) => {\r\n        if(this.state.searchText !== '') {\r\n            this.setState({amount: value},()=>{\r\n                axios.get(`${this.state.apiURL}/?key=${this.state.apiKey}&q=${this.state.searchText}&image_type=photo&per_page=${this.state.amount}&safesearch=true`).then(res => this.setState({images: res.data.hits})).catch(err => console.log(err))      \r\n            })\r\n        }\r\n        else {\r\n            this.setState({amount: value})\r\n        }\r\n    }   \r\n\r\n    render() {\r\n        let placeholderText = <div style = {{textAlign:\"center\"}}>Your images will appear here</div>\r\n        return (\r\n        <React.Fragment>\r\n           <TextField name = \"searchText\" value = {this.state.searchText} onChange = {this.onTextChange}\r\n           floatingLabelText = \"Search for images\" fullWidth = {true}/>\r\n           <br/>\r\n           <SelectField name = \"amount\" floatingLabelText = \"Amount\" value = {this.state.amount} onChange = {this.onAmountChange}>\r\n                <MenuItem value = {5} primaryText = \"5\"/>\r\n                <MenuItem value = {10} primaryText = \"10\"/>\r\n                <MenuItem value = {15} primaryText = \"15\"/>\r\n                <MenuItem value = {30} primaryText = \"30\"/>\r\n                <MenuItem value = {50} primaryText = \"50\"/>\r\n           </SelectField>\r\n           <br/>\r\n           {this.state.images.length ? <ImageResults images = {this.state.images}/>: placeholderText }\r\n        </React.Fragment>\r\n        )\r\n    }\r\n}\r\nexport default Search;\r\n","import React from 'react';\nimport './App.css';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport NavBar from './components/navbar/Navbar';\nimport Search from './components/search/Search';\n\nfunction App() {\n  return (\n   <MuiThemeProvider>\n     <React.Fragment>\n       <NavBar/>\n       <Search/>\n     </React.Fragment>\n   </MuiThemeProvider>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}